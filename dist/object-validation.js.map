{"version":3,"sources":["../src/object-validation.js"],"names":["ObjectValidaton","object","message","undefined","types","constructor","Array","indexOf","typesStr","map","x","name","join","replace","baseTypes","found","find","isTypeOf","every","ex","typeStr","isInstanceOf"],"mappings":"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","file":"object-validation.js","sourcesContent":["import ObjectValidation from './object-validation';\r\n\r\nexport default class ObjectValidaton {\r\n    constructor(object) {\r\n        this.object = object;\r\n    }\r\n    /**\r\n     * Validation to not allow null value\r\n     * \r\n     * @param {string} [message='Object cannot be null'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error then value is null\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isNotNull(message='Object cannot be null') {\r\n        if (this.object === null) {\r\n            throw message;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to not allow undefined value\r\n     * \r\n     * @param {string} [message='Object cannot be undedined'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error then value is undefined\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isNotUndefined(message='Object cannot be undedined') {\r\n        if (this.object === undefined) {\r\n            throw message;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to not allow null OR undefined value\r\n     * \r\n     * @param {string} [message='Object cannot be null or undefined'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error then value is null OR undefined\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isNotNullOrUndefined(message='Object cannot be null or undedined') {\r\n        if (this.object === null || this.object === undefined) {\r\n            throw message;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to check if a value is of given type(s)\r\n     * \r\n     * @param {any|any[]} types \r\n     * @param {string} [message='Object must be of type {types}'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error if the object is not of the supplied type(s)\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isTypeOf(types, message='Object must be of type {types}') {\r\n        if (types.constructor !== Array) {\r\n            types = [types];\r\n        }\r\n        if (this.object !== null && this.object !== undefined && types.indexOf(this.object.constructor) === -1) {\r\n            let typesStr = types.map((x) => { return x.name; }).join('|');\r\n            throw message.replace('{types}', typesStr);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to check if a value is of given base type(s)\r\n     * \r\n     * @param {any|any[]} baseTypes \r\n     * @param {string} [message='Object must have a base type of {types}'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error if value is not of given base type(s)\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isInstanceOf(baseTypes, message='Object must have a base type of {types}') {\r\n        if (baseTypes.constructor !== Array) {\r\n            baseTypes = [baseTypes];\r\n        }\r\n        if (this.object !== null && this.object !== undefined) {\r\n            let found = baseTypes.find((x) => {\r\n                return this.object instanceof x;\r\n            });\r\n            if (!found) {\r\n                let types = baseTypes.map((x) => { return x.name; }).join('|');\r\n                throw message.replace('{types}', types);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to check if all objects in an array is of the given type(s)\r\n     * \r\n     * @param {any} types \r\n     * @param {string} [message='Object must be an array only containing objects of type {types}'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error then not all items in the array are of the given type(s)\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isArrayOnlyContainingTypesOf(types, message='Object must be an array only containing objects of type {types}') {\r\n        if (this.object && this.isTypeOf(Array) && !this.object.every((x) => {\r\n            try {\r\n                new ObjectValidation(x).isTypeOf(types);\r\n            } catch(ex) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })) {\r\n            let typeStr = types.map((x) => { return x.name; }).join('|');\r\n            throw message.replace('{types}', typeStr);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validation to check if all objects in an array is of the given base type(s)\r\n     * \r\n     * @param {any} types \r\n     * @param {string} [message='Object must be an array only containing objects that have a base type of {types}'] \r\n     * @returns {ObjectValidation}\r\n     * @throws {Error} throws an error then not all items in the array are of the given base type(s)\r\n     * \r\n     * @memberOf ObjectValidaton\r\n     */\r\n    isArrayOnlyContainingInstancesOf(types, message='Object must be an array only containing objects that have a base type of {types}') {\r\n        if (this.object && this.isTypeOf(Array) && !this.object.every((x) => {\r\n            try {\r\n                new ObjectValidation(x).isInstanceOf(types);\r\n            } catch(ex) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })) {\r\n            let typeStr = types.map((x) => { return x.name; }).join('|');\r\n            throw message.replace('{types}', typeStr);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n"]}